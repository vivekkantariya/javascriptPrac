what is javascript?
    - JS is a programming language. use it to give instructions to the computer.
    - JS is a Dynamicaaly Typed language : means you don't want to declare the datatype the JS automatically detects it called runtime interpreted

    input(code) -> computer -> output

alert : popups on the window 
    alert("Hello world!");
    this will create an small window and display hello world!

console.log("Hello JS!") : is used to print a message in the console
    ';' is used to indicate to terminate the line 

you can only use JS via HTML in JS otherwise you cannot becuase JS can directly connect via browser so only you can do with HTML 

- variables are the containers for the data 

    name="Toanu";
    age = 18;
    price = 150.20;
    isfollow = true;

- null is a special value means nothing, absence of an object 
 
- undefined that means nothing is defined 
        by default when the variable is declared  but the value is not assigned to it it will print undefined

    the difference is in null the thing is defined but in undefined the thing is not defined

Note: you can declare the variable this way but its a bad practice always use let, var or const before the variable to declare them.

var : the oldest way to declare variable, can be re-declared & updated. A global scope variable
        var age = 10;
        var age = 18;
        console.log(age)    prints 18
        not a good way to write a code also confusing when reviewing the code.

let : variable cannot be re-declared but can be updated. a block scope variable
        let age = 18;
        age = 25;
        console.log(age); 25

const : cannot be re-declared or updated. A block scope variable
        const age = 24;
        console.log(age);
        now the const is fixed thorughout the code 

Data types in JS: 
    - Number, String, Boolean, undefined, null, bigint, symbol

    - primtive and non-primitive

    - primitive consist 7 data types 

    - non-primitive consist Objects.

        to see the type of datatype use 'typeof' keyword 

    the bigint and symbol not used frequently in the JS used rarely in JS

    let x = BigInt('123');
        123n
    let y = Symbol("hello")
        Symbol(hello)

    Objects = collectios of values
        - stored in key:value pair 
        - to declare an object use const object name 

            const student = {
                name : "Vivek ",
                age : 20,
                cgpa : 7.10,
                pass : true,
            };

        - to access the student keys like name age cgpa and pass you can do like this 
            student["name"]
        - it will return vivek
        - also can access with dot operator "." student.age

    we can update const object keys 

    - if you add anything with stirng like "abc" + 123 it will concatenate 

Operators & conditional Statements:
    - Arithmetic Operators:
        +,-,*,/,modulo(%), exponent(**), icrement(++), decrement(--)    

        modulo means remainder
    
    - ASsignment Operators:
        +=,-=,*=,/=,**=

    - Comparison Operators:
        equal to ==
        equal to & type ===        also checks the datatype
        not equal to !=
        equal to & type !==

    - Logical Operators:
        Logical AND && - true when both true otherwise true
        Logical or || - only false when both are false otherwise true
        Logical NOT ! - 

Conditional Statements - to implement some condition in the code 

    if Statements: 
        if (expression){
            code
        }
    if else Statements:
        if (expression){
            code
        }else{
            code
        }
    else if Statements:
        if (expression){
            code
        }else if {
            code
        }else{
            code
        }

Ternary Operators: contains 3 operands
    a?b:c
    a - is the condition 
        if it is true b is executed 
        if it is false c is executed

    age > 18 ? "adult":"child"

    simpler and compact if else 

Note: MDN is the official Documentation of JS, HTML, CSS

Loops in JS :
    loops are used to execute a peice of code again & again 

    - for loop 
        for(let i = 1,i<=5,i++){
            code
        };  
    - while(condition){
        code
    };
    - do while 
    - do {
        code
    }while(condition);
    - for of loop
        for string and arrays
        let str = "apnacollege"
        
        for (let i of str){
            console.log(i)
        }

        no need of decalaration and updation
    
    - for in loop
        for objects and arrays
        for (let i in objectname){
                code
        }

        returns all the keys of object

string : sequesnce of characters to represent text   

    str = "vivek"
    str.lenth

template literals:
    A way to have embeded expression in string 

        use backtick ` ` to represent

    String interpolation :
        to create stirngs by doing substitution of placeholders 

        `String text ${expression} stirng text `

        the thing or the expression which is wrote on {} is interpolation   

        we can also calculate the values in the interpolation 

escape characters length will count 1 like /n,/t

string methods in JS : built in methods in string    
    str.toUpperCase()
    str.toLowerCase()
    str.trim()  removes whitespaces
    .slice(start,end)
    .concat(stirng)
    .replace(string,newstring)      if contains multiple same characters it will replace first one 
    .replaceall(string,newstring)   change all same characters 
    .charat(idx)

    all the methods just return the view they cannot update the original string 
    they always return new string they don't change the original one 

    because strings are immutable in JS 

arrays in JS : Collection of items

    syntax : let arr = [];

    used when we want to store same thing of differnet value in same location 
    like marks of students you dont want create same variable of marks for every student

    IN jS array is a type of object internally when you do typeof arr it will return object 
    so array is object IN JS 
    
    arrays are mutable you can change via particular indexing 

looping over an array
    for in 
    for of 

Array methods in JS :
    push(): add to end  
        .push("value");
        changes original array 
        
    pop: delete from end and return 
        .pop("value")
        changes original array 

    tostring: converts array and string 
        dont change original array 

    concat : joins multiple arrays & returns result 

    unshift : adds in the start of the arr and return
        changes original array 
    
    shift : delete from start & return
        changes original array 

    slice : returns a piece of code 
        cannot change the original array

    splice : change original array 
        splice(startindex, deleteelementno, addelementno);

Functions in JS:
    block of code that performs a specific task, can be invoked whenever needed 

    helps in to don't write the piece of code multiple times when you want to run the same code multiple times 
    reduse the redudancy 

    creation of a function: here we are just defining the class 
        function functionname(){
            code
        }

    to call a function: we need to call before using it 
    also colled invoking a function 
        functionname();

        function functionname(parameters){
            code
        }

    the parameter is also called the input of a function 

    example : 
                    
        // Sum Function 
        function total(x,y){
            let carry = x + y;
            console.log(carry)
        }

        total(5,6);

    after return keyword not even a single line executed should be unrechable code 
    
ArroW function :    
    Compact way of writing a Function 
    introduce in modern JS in 2015

    syntax:
        (parameters) => {           this is the arrow function if we store it in a variable then the value store in that 
            code                    the original is this 
        }

    - it returns nothing you want to store it in a varibale to return it somethign 

        let sum = (parameters) => {
            code
        }

    - now it returns the code 

    we can also create a arrow function without the parameters 

    const print = () => {
        console.log("print hello")
    }

    - if we have the single line of code in ArroW function then we can remove the {} braces also or the block also 

    const print = () => console.log("print hello");

    the function and the method are the two different terms but looked liked same 
    
    if the functioni is associated with the object then it is a method otherwise it is a function only 
    the .toUpperCase is a function itself but wehn we bind with string the it will become method and many more like that 

ForEach loop :
    Note : a callback function passed as an argument to another function 

    let arr = [5,7,8,15,36]

    here the val is the value of each index 
    arr.foreach(function printval(val){
        console.log(val);
    })    

    with arrow function 
    arr1.forEach((val) => {
        console.log(val);
    })      

    syntax: 
        arr.forEach(callbackfunction)
        containss three parameters (value,index,array)

    callbackfunction : here it is a function to execute for each element in the array 

    Note : a callback function passed as an argument to another function 
    
    can only be used for arrays not for stirngs

    foreach does not create any new array it just returns new view 
note : higher order function/methods : 
    are the function or the methods that either take another function has a parameter inside or they return another function has there output

    unique way :

            let arrnums = [8,78,6,45,12,65,]
                
            let calcsquare = (num) => {
                console.log(num*num)
            }

            arrnums.forEach(calcsquare);

some most usefull array methods:
    - map : just like foreach but it creates the ew array with results while the foreach does not create new 

        creates a new array with the result of some operation. the value its callback returns are used to form new array 

        arr.map(callbackfunction(value, index, array)) 
    
    - filter : creates a new array of elements that give true for a condition/filter 

        simply if the condition is true it will store new array based on the condition 

    - reduce : performs some operations and reduce the array to a single value
        it returns that single value 

        like sum, avg, smallest , largest 

        where inputs are more but we need to return only 1 value    