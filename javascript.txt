what is javascript?
    - JS is a programming language. use it to give instructions to the computer.
    - JS is a Dynamicaaly Typed language : means you don't want to declare the datatype the JS automatically detects it called runtime interpreted

    input(code) -> computer -> output

alert : popups on the window 
    alert("Hello world!");
    this will create an small window and display hello world!

console.log("Hello JS!") : is used to print a message in the console
    ';' is used to indicate to terminate the line 

you can only use JS via HTML in JS otherwise you cannot becuase JS can directly connect via browser so only you can do with HTML 

- variables are the containers for the data 

    name="Toanu";
    age = 18;
    price = 150.20;
    isfollow = true;

- null is a special value means nothing, absence of an object 
 
- undefined that means nothing is defined 
        by default when the variable is declared  but the value is not assigned to it it will print undefined

    the difference is in null the thing is defined but in undefined the thing is not defined

Note: you can declare the variable this way but its a bad practice always use let, var or const before the variable to declare them.

var : the oldest way to declare variable, can be re-declared & updated. A global scope variable
        var age = 10;
        var age = 18;
        console.log(age)    prints 18
        not a good way to write a code also confusing when reviewing the code.

let : variable cannot be re-declared but can be updated. a block scope variable
        let age = 18;
        age = 25;
        console.log(age); 25

const : cannot be re-declared or updated. A block scope variable
        const age = 24;
        console.log(age);
        now the const is fixed thorughout the code 

Data types in JS: 
    - Number, String, Boolean, undefined, null, bigint, symbol

    - primtive and non-primitive

    - primitive consist 7 data types 

    - non-primitive consist Objects.

        to see the type of datatype use 'typeof' keyword 

    the bigint and symbol not used frequently in the JS used rarely in JS

    let x = BigInt('123');
        123n
    let y = Symbol("hello")
        Symbol(hello)

    Objects = collectios of values
        - stored in key:value pair 
        - to declare an object use const object name 

            const student = {
                name : "Vivek ",
                age : 20,
                cgpa : 7.10,
                pass : true,
            };

        - to access the student keys like name age cgpa and pass you can do like this 
            student["name"]
        - it will return vivek
        - also can access with dot operator "." student.age
        - Object.freeze(variablename)
            it will freeze the object and after that any modification will not happen 

    we can update const object keys 

    - if you add anything with stirng like "abc" + 123 it will concatenate 

Operators & conditional Statements:
    - Arithmetic Operators:
        +,-,*,/,modulo(%), exponent(**), icrement(++), decrement(--)    

        modulo means remainder
    
    - ASsignment Operators:
        +=,-=,*=,/=,**=

    - Comparison Operators:
        equal to ==
        equal to & type ===        also checks the datatype
        not equal to !=
        equal to & type !==

    - Logical Operators:
        Logical AND && - true when both true otherwise true
        Logical or || - only false when both are false otherwise true
        Logical NOT ! - 

Conditional Statements - to implement some condition in the code 

    if Statements: 
        if (expression){
            code
        }
    if else Statements:
        if (expression){
            code
        }else{
            code
        }
    else if Statements:
        if (expression){
            code
        }else if {
            code
        }else{
            code
        }

Ternary Operators: contains 3 operands
    a?b:c
    a - is the condition 
        if it is true b is executed 
        if it is false c is executed

    age > 18 ? "adult":"child"

    simpler and compact if else 

Note: MDN is the official Documentation of JS, HTML, CSS

Loops in JS :
    loops are used to execute a peice of code again & again 

    - for loop 
        for(let i = 1,i<=5,i++){
            code
        };  
    - while(condition){
        code
    };
    - do while 
    - do {
        code
    }while(condition);
    - for of loop
        for string and arrays
        let str = "apnacollege"
        
        for (let i of str){
            console.log(i)
        }

        no need of decalaration and updation
    
    - for in loop
        for objects and arrays
        for (let i in objectname){
                code
        }

        returns all the keys of object

string : sequesnce of characters to represent text   

    str = "vivek"
    str.lenth

template literals:
    A way to have embeded expression in string 

        use backtick ` ` to represent

    String interpolation :
        to create stirngs by doing substitution of placeholders 

        `String text ${expression} stirng text `

        the thing or the expression which is wrote on {} is interpolation   

        we can also calculate the values in the interpolation 

escape characters length will count 1 like /n,/t

string methods in JS : built in methods in string    
    str.toUpperCase()
    str.toLowerCase()
    str.trim()  removes whitespaces
    .slice(start,end)       negative values allowed
    .substring(start,end)       negative values not allowed 
    .concat(stirng)
    .replace(string,newstring)      if contains multiple same characters it will replace first one 
    .replaceall(string,newstring)   change all same characters 
    .charat(idx)
    .indexof(passthecharacter)
    .includes() :     if it contains something
    .split() : takes a pattern and divids the string into that pattern separated 

    all the methods just return the view they cannot update the original string 
    they always return new string they don't change the original one 

    because strings are immutable in JS 

Number methods in JS :
    .tostring() : to covert in the string 
    .toficed(number): fixed number return 
    .toprecision(number): only that number returns if more than that it will convert into exponential 
    .tolocalestring(): returns with diff by ',' if the number is large like 1000000 by default ',' are US standards 

arrays in JS : Collection of items

    syntax : let arr = [];

    used when we want to store same thing of differnet value in same location 
    like marks of students you dont want create same variable of marks for every student

    IN jS array is a type of object internally when you do typeof arr it will return object 
    so array is object IN JS 
    
    arrays are mutable you can change via particular indexing 

looping over an array
    for in 
    for of 

Array methods in JS :
    push(): add to end  
        .push("value");
        changes original array 
        
    pop: delete from end and return 
        .pop("value")
        changes original array 

    tostring: converts array and string 
        dont change original array 

    concat : joins multiple arrays & returns result 

    unshift : adds in the start of the arr and return
        changes original array 
    
    shift : delete from start & return
        changes original array 

    slice : returns a piece of code 
        cannot change the original array

    splice : change original array 
        splice(startindex, deleteelementno, addelementno);

    .flat : returns a new array with all sub array 

    .includes:

    .indexof:

    .join:  returns the string after the join 

Functions in JS:
    block of code that performs a specific task, can be invoked whenever needed 

    helps in to don't write the piece of code multiple times when you want to run the same code multiple times 
    reduse the redudancy 

    creation of a function: here we are just defining the class 
        function functionname(){
            code
        }

    to call a function: we need to call before using it 
    also colled invoking a function 
        functionname();

        function functionname(parameters){
            code
        }

    the parameter is also called the input of a function 

    example : 
                    
        // Sum Function 
        function total(x,y){
            let carry = x + y;
            console.log(carry)
        }

        total(5,6);

    after return keyword not even a single line executed should be unrechable code 
    
ArroW function :    
    Compact way of writing a Function 
    introduce in modern JS in 2015

    syntax:
        (parameters) => {           this is the arrow function if we store it in a variable then the value store in that 
            code                    the original is this 
        }

    - it returns nothing you want to store it in a varibale to return it somethign 

        let sum = (parameters) => {
            code
        }

    - now it returns the code 

    we can also create a arrow function without the parameters 

    const print = () => {
        console.log("print hello")
    }

    - if we have the single line of code in ArroW function then we can remove the {} braces also or the block also 

    const print = () => console.log("print hello");

    the function and the method are the two different terms but looked liked same 
    
    if the functioni is associated with the object then it is a method otherwise it is a function only 
    the .toUpperCase is a function itself but wehn we bind with string the it will become method and many more like that

IIFE:   (Imediately invoked function expression)
    just wrap the function in the () parenthesis    
       (function chai(){
            console.log("Drink tea")
        })();

        the function is IIFE now we don't want to execute it it executes automatically evrytime but one time per run 

        the main reason is many time becuase of global scope pollution so to prevent that we use IIFE 

        here we need the semicolon to end ;

ForEach loop :
    Note : a callback function passed as an argument to another function 

    let arr = [5,7,8,15,36]

    here the val is the value of each index 
    arr.foreach(function printval(val){
        console.log(val);
    })    

    with arrow function 
    arr1.forEach((val) => {
        console.log(val);
    })      

    syntax: 
        arr.forEach(callbackfunction)
        containss three parameters (value,index,array)

    callbackfunction : here it is a function to execute for each element in the array 

    Note : a callback function passed as an argument to another function 
    
    can only be used for arrays not for stirngs

    foreach does not create any new array it just returns new view 
    means foreach will not return anything if you want to store that in a variable and print that it will return nothing and output is undefined

note : higher order function/methods : 
    are the function or the methods that either take another function has a parameter inside or they return another function has there output

    unique way :

            let arrnums = [8,78,6,45,12,65,]
                
            let calcsquare = (num) => {
                console.log(num*num)
            }

            arrnums.forEach(calcsquare);

some most usefull array methods:
    - map : just like foreach but it creates the ew array with results while the foreach does not create new 

        creates a new array with the result of some operation. the value its callback returns are used to form new array 

        arr.map(callbackfunction(value, index, array)) 
    
    - filter : creates a new array of elements that give true for a condition/filter 

        simply if the condition is true it will store new array based on the condition 

    - reduce : performs some operations and reduce the array to a single value
        it returns that single value 

        like sum, avg, smallest , largest 

        where inputs are more but we need to return only 1 value    

the 3 muskeeters of web-developement :
    HTML- (STRUCTURE) - hyper text markup language 

    CSS - (STYLE) - cascading style sheets
        <style> - connects HTML with css
        the link tag is used to connect css with html 

    JS - (LOGIC) - javascript
        <script> - connects HTML with JS

the alert and the prompt holds until it is clicked. it will nt execute the further instruction 

to use the css or apply the css 
types of ways to implement the css :
    - with tag name 
        body{
            background-color:blue;
        }

it's not a good practice to write the code in the html file of its css and jS 
    put both css and js in separate file and after call them.
    - it also increase the readability of the code and a lot of other benefits also 
    - the browser caching will load faster this way 

window object:
    the window object represent and open window in a browser.
        - it is browser's object(not javascript)
        - it is automatically created by browser
        - it is a global object wiht lots of properties and methods.
        - contains a lot of properties and methods and data 

        all the methods are the part of the window object 
            
            window.console.log
            window.alert 

        so the methods are the part of the window object you can also write this way 

what is DOM?
    - when a webpage is loaded, the browser creates a Documnet Object Model (DOM) of the page.
    simply means we can access all the HTML code with it like all the tags, properties etc
    and this object is a special object name document and it is available in the window object
    - basically the documnet object contains all the HTML code so you can refer in the JS and do modification if want
    to see the properties of the document 

    the console.dir - prints the sprecial objects methods and properties
    
        console.dir(window.document)

so we can acces the HTML in the javascript with the help of DOM (document object model) lies in the window object which is a browser object

    DOM is a tree like STRUCTURE contains NODE of every object and tags of the HTML file follows a hirearchical manner 

Accessing tags via document:
    - to acces the body of HTML in the JS 
        console.dir(document.body)
        - it will return all the properties of body to print the code 
        console.log(document.body)
        - the nodelist contains the total number of the tags or nodees in the HTML field

    - console.dir(document.body.childNodes[1])  remember it will return the properties
        you can acces the nodes like this to view them to change them 
    - console.log(document.body.childNodes[1])  the log will return the exact content

changing with DOM:
  document.body.style.background = "blue";      it will changes color to blue

DOM MANIPULATION : 
    first if we want to make a change we need to acces that tag or the element 
    to acces the elements

    - selecting the element with ID : we gave the id to the tag in the html 
        - we represent id as # hash (#heading)
        - the id is always unique
        document.getElementId("myid");

    - selecting tht element with class :
        - we represent class as . dot (.classname)
        - we use class if want to apply same thing like css in all 
        - it returns the HTML collection its like array 
        document.getElementbyclassname("myclass")

    - selecting tht element with tag :
        document.getElementbytagname("p")

    note: if any class, id, tag is not found they return null or empty array 

    we can use these three ways to acces the elements but we use a level up way to access the elements

* query selector
    document.querySelector("id/classname/tag")
        returns first element if contains more than one same tag returns the first one 

    document.querySelectorAll("id/classname/tag")
        returns nodelist returns all same type of elements

    the nodelist is a list of nodes which is in the document or the DOM in a hirearchical form 

    remember if want to pass the id and the classname we want to pass it with its preceding 
        document.querySelector(".id")
        document.querySelector(".classname")

properties of the DOM MANIPULATION

    tagname: simply returns the tag name of the tag 
    innertext : returns the text content of the element and all its children
        when the structure is like tree and the div or the body contains lot of items or tags 
        then we can find based on that with innertext
    
        we can also do like this 
            document.querySelector("div").children
        and it will the return the list of items and the htmlcollection which is and array 
    innerHTML: done same thing but returns in HTMl format means the tags are visible 
    textcontent: returns textual content even for the hidden content
        simply we can see the hidden content which is in the html 
    
Dom part - 2

Attributes :

    getattribute:
        simply we get the Attributes of the particular tag like its id, name etc..

    setattribute : 
        simply we can set the attribute by accesing the tag 

    style :
        the style attribute is to change the css of the particular div 
    
insert elements in the DOM :

above we learn how to acces the elements, how to change elements via dom 

now we can insert the elements in the dom 

there are 2 steps to add the insert in the HTMl via DOM 
    first is to create the element 
    second is to insert in the HTML page or the in the document via the method 
        - .append : adds the element end of the node (inside)
        - .prepend: add the element at the start of the node (inside)
        - .before: adds before the node (outside)
        - .after: adds after the node (outside)

    ex :
        // Step - 1 created the element 
        let newel = document.createElement("button")
        newel.innerText = "newbtn"

        // Step -2 inserting the element in the Document 
        let newbtn = document.querySelector("div")
        newbtn.append(newel)    // at the end of the node 
        newbtn.prepend(newel)    // at the start of the node 
        newbtn.before(newel)    // at before the node 
        newbtn.after(newel)    // at after the node 

remove in the DOM :
    node.remove: it removes the node but first you need to acces the node 

classlist:
    collection of the class attributes of the elements
    to add new class in the classlist we use .add(classname) to add in the particular tag  

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BY HITESH : INTERVIEW LEVEL THINGS 
console.table([]): can pass multiple variables here.

prefer not to use var because of issue in block scope and functional scope 

null is a standalone value, null means empty (khali) 

ECMA : is the official Documentation of the JS 

conversion :
    "33" => 33
    "33abc" => NaN (Not a Number)

MEME :
    console.log(1+2)        // 3
    console.log("1"+2)      // 12
    console.log(1+"2")      // 12
    console.log("1"+2+3)       // 123
    console.log(1+2+"3")        // 33

    these all are differents

    if the string is first then it will just add it 
    if the number is first then it will do operations 

    read in the ecma primitive  

the comparison operator(>,<,>=,<=) and the equality check(==) operator worked differently in jS
    comparison converts null to a number treating it has 0 

because the JS language is inconsistent we may see this type of bugs.

in the official Documentation the THe JS datatypeis divided into two types only 
    - primitive : call by value that means we always get the copy of the value so all the changes will happen it will happen in the copy 
        string, number, Boolean, null, undefined, symbol, bigint
    
    - non primitive: also called reference type 
        direct allocate the reference of this type 
        array, objects, functions

note : in js there is not a special datatype of decimal or float in JS number is a number 
    - the symbol is uded for to store every variable as a unique mostly used in the react 
    - to use bigint after the number simply put the n ex: 54634934686464876n

the difference is made upon how the data is stored in the memory and how it can access from the memory 

is JS is Dynamicaaly typed language or static typed language:
    JS is Dynamicaaly typed language here we are not defining our datatypes in runtime it will automatically determine the type of language 

stack and heap memory :
    JS is also follows garbage collection kindof 

    stack memory is used in all primitive datatypes 
        whenever the stack memory is used we get the copy of the variable or value
    
    the heap memory is used in non-primitive datatypes
        and whenever the heap memory is used we get the original reference of the variable or value

includes Maths library:
    contains lot of inbuilt function related to math

    some methods 
      .abs(): absolute value, turns neg value into positive 
      .round(): round off the value
      .ciel(): returns the cieling value ex: if the value is above 4 ie. 4.2 it returns 5
      .floor(): returns the flooring value ex: if the value is above 4 ie. 4.9 it returns 4
      .random(): returns the random value lies in between 0 and 1 
        so we * it with 10 so the value is shift by 1 digit 
        - sometimes it give 0 so by these we add + 1

        other formula  :
            math.random() * (max - min +1 ) + min 
                for the range 

Array :
    A shallow copy of an object is a copy whose properties share the same references

    A deep copy measn of an object is a copy whose properties do not share the same references

    the unshift function or the method add's the value to the first or the begining but it shifts all the values to the next 
        you want to shift the all values it is not a optimized way to do 

    to merge 2 arrays :
        the push method pushed the whole array in one array 
        the concat will work properly 
        the spread method in JS used like this ...arrayone, ...arraytwo 

    Array.from(passtheprimitiveobject): convert the object into array

    Array.of : returns a new array from a set of elements 
        when you have multiple variable of elements

    Array.isarray : checks that the array is an array 

objects:
    we can declare objects in two ways
        - objects literal : Can be reused as a singleton, but not always intended that way. multiple instances 
            exammple :

            let myobj = {
                name : "vivek",
                age : 20,
                mail : "email"
            }

            myobj.mail
            myobj["name"]

        - constructor 
            singleton : when make an object from the constructor it is singleton. 
                An object designed to have only one instance in the entire application.

    Object methods :
        .assign(): for merginf two objects 
        .keys : 
        .values : 
        .entries : every key value pair is converted in the array 
        .hasOwnPropery : checks if the key is exist or not 

    to use the symbol datatype in the object used in [] brackets 

    destructor in objects :

       let course = {
            coursename : "JS",
            price : "3364",
            author : "vivek",
       };

       const {author} = course
       console.log(author)

function :
    functionname is only the reference to the function 
    when the functionname is with the () then and then it will execute otherwise only name is the reference of the function

    diff between parameters and argumets 
        parameters: when we are creating a function and passed the param in the () is callled parameters

        argumets: when we are passing the param while calling the function is called the argumets

    when the number of parameters are not fixed so we use rest operator (...) we also use this has spread operator based on the usecase JS decides which one i sthis 

    exammple: 
        function cart(...num1) {
            return num1
        }

        console.log(cart(200,400,500,600,800,700,202))
            returns a array 

    this keyword: when we are refering current context we are using this keyword, when we don't want to hardcode the value of the context 

    the window object is the global object 

    when we declare funtion in one line is called implicit return
        let addtwo = (num1,num2) => num1 + num2
        the name implicit return is because we dont need to write return here 
        when we use {} we need to write return keyword

    
javascript Execution context :how the JavaScript engine processes code and keeps track of what is currently running.

    TYpes of execution context
    - global execution context/global environment : whenever the code runs it goes to global exceution and allocated to this keyword always happen in every code on matter big or small 
            only one global execution context per program this refers to the global object (window in browsers).
    - function execution context
        Created each time a function is invoked.
        Each function has its own execution context.
        New context is pushed onto the call stack

    Phases of execution context:
        Creation phase :
            variables and functions are stored in the memory
            this keyword is defined

        Execution phase :
            code is executed line by line and variables are assigned values 
            functions are invoked

        after the execution of execute phase the variable or the output returned to the global execution context 
    
    JavaScript uses a Call Stack to manage execution contexts:
        The Call Stack is a data structure used by the JavaScript engine to keep track of function calls—what function is currently running, and what to return to when it finishes.
        follows a lifo 

        How It Works
            When a function is called, it's added (pushed) to the top of the stack.
            When the function finishes, it's removed (popped) from the stack.
            The engine always runs the function on top of the stack.

    javascript is a single threaded everthings is a thread and a single process 

control flow :
    implicit scope : writing in one line 

    falsy values :
        false, 0, -0, bigint 0n, "", null, undefined, NaN
    
    truthy values :
        "0", 'false', " ", [], {}, function(){}

    false == 0
        true 
    false == ''
        true 
    0 == ''
        true 

    null coalescing operator (??) : for null and undefined

    whenever sometimes the values like null and undefined datatype received we need to handle that 
    so to handle this null coalescing operator is use 

    ex :
        let val1;
        val1 = 5 ?? 10;                     // assign 5
        val1 = null ?? 10;                  // assign 10
        val1 = undefined ?? 10;             // assign 10

    break : when we want to break the control flow 
        like some value is detected now break the flow no further execution 
    continue : skip the condition 

MAP : the map object holds the key value pair and remember the original insertion of order of the keys.
    map is unique and the oder is original 

    we can do map chanining .map().map().filter() just like that 